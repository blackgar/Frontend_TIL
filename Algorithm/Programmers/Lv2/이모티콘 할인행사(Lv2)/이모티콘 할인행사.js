function solution(users, emoticons) {
  // 이모티콘 할인율이상 할인하는 이모티콘만 구입한다.
  // 이모티콘 금액 상한선 이상일 경우 이모티콘 플러스에 가입하게 된다(가입자수++, 매출액x)
  // 상한선 이하일 경우 이모티콘을 할인율에 맞게 구매한 금액을 매출액에 반영한다.(가입자수x)
  // 이렇게 유저별로 어떻게 이모티콘을 구매하는지를 판단하고 전체 이모티콘 가입자수와 이모니콘 매출액을 배열로 반환한다.
  // 단, 1순위 기준은 가입자수를 늘리는것이고 2순위가 매출액을 늘리는것이다. 즉 이모티콘 플러스 가입자수를 늘릴 수 있는 조건으로 탐색하고 그 조건이 여러개라면 이모티콘 매출액을 늘릴 수 있는 방안을 추가적으로 탐색해야 한다. 모든 조합을 찾는 문제 같음.
  var answer = [];
  // 유저별 할인율별로 객체로 같은 할인율을 가진 유저가 몇명있는지 상한선 금액을 배열로 담아서 기록한다(길이로 몇명이 있는지 체크).
  // 그 객체의 키값을 활용해서 또다른 객체에 그 할인율에 해당하는 유저의 이모티콘 구매액을 기록한다. 즉, 모든 유저가 이모티콘을 구매하는 할인율 별로 각 유저들이 얼마나 구매하는지를 하나의 배열에 담아놓는다.
  // 이후 모든 할인율에 맞게 구매액을 정리한 객체를 바탕으로 각 할인율 별로 플러스 가입자와 매출액을 계산하여 또 하나의 배열에 담아둔다.
  // 그리고 그 배열을 가입자 수를 기준으로 정렬하고 가입자 수가 제일 높은 배열의 값들만 남긴다.
  // 이 때 가입자 수가 가장 높은 값이 하나라면 그 값을 답으로 반한한다.
  // 그렇지 않다면 다시 매출액을 기준으로 정렬한다.
  // 그렇게 제일 앞에 온 배열을 답으로 반환한다.

  return answer;
}

console.log(
  solution(
    [
      [40, 10000],
      [25, 10000],
    ],
    [7000, 9000]
  )
);
console.log(
  solution(
    [
      [40, 2900],
      [23, 10000],
      [11, 5200],
      [5, 5900],
      [40, 3100],
      [27, 9200],
      [32, 6900],
    ],
    [1300, 1500, 1600, 4900]
  )
);
console.log(
  solution(
    [
      [40, 9500],
      [40, 10000],
    ],
    [7000, 9000]
  )
);
